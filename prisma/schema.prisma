// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}
model User {
  id             String   @id @default(cuid())
  name           String?
  email          String?  @unique
  password       String?
  emailVerified  DateTime?
  image          String?
  accounts       Account[]
  sessions       Session[]
  questions      Question[]
  answers        Answer[]
  votes          Vote[]
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Account {
  id                 String   @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  email              String?  // Email from OAuth provider
  refresh_token      String?
  access_token       String?
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String?
  session_state      String?
  user               User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime
  @@unique([identifier, token])
}

model Question {
  id          String   @id @default(cuid())
  title       String
  description String   @db.Text
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tags        QuestionTag[]
  answers     Answer[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model Tag {
  id          String   @id @default(cuid())
  name        String   @unique
  questions   QuestionTag[]
  createdAt   DateTime @default(now())
}

model QuestionTag {
  id         String   @id @default(cuid())
  questionId String
  tagId      String
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  tag        Tag      @relation(fields: [tagId], references: [id], onDelete: Cascade)
  
  @@unique([questionId, tagId])
}

model Answer {
  id         String   @id @default(cuid())
  content    String   @db.Text
  questionId String
  userId     String
  parentId   String?  // For nested replies
  question   Question @relation(fields: [questionId], references: [id], onDelete: Cascade)
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  parent     Answer?  @relation("AnswerReplies", fields: [parentId], references: [id], onDelete: Cascade)
  replies    Answer[] @relation("AnswerReplies")
  votes      Vote[]
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Vote {
  id       String   @id @default(cuid())
  type     VoteType
  userId   String
  answerId String
  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  answer   Answer   @relation(fields: [answerId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  
  @@unique([userId, answerId])
}

enum VoteType {
  UP
  DOWN
}
